package main

import (
	"flag"
	"fmt"
	"github.com/c-bata/go-prompt"
	"log"
	"manage_system/config"
	"manage_system/dbconn"
	"net"
	"os"
	"strings"
)

var (
	db_ip       string
	db_port     int
	db_name     string
	db_user     string
	db_password string
)

var (
	is_logged_in bool
	user_id      int
	user_name    string
	user_grant   int
)

func flags() bool {
	flag.StringVar(&db_ip, "h", config.DB_IP, "数据库 ip 地址")
	flag.IntVar(&db_port, "P", config.DB_PORT, "数据库端口号")
	flag.StringVar(&db_name, "d", config.DB_NAME, "数据库名称")
	flag.StringVar(&db_user, "u", config.DB_USER, "数据库用户名")
	flag.StringVar(&db_password, "p", config.DB_PASSWORD, "数据库密码")
	flag.Parse()
	ret := net.ParseIP(db_ip)
	if ret == nil {
		return true
	}
	return false
}
func loop() bool {
	var opt string
	unlogged_suggestions := func(in prompt.Document) []prompt.Suggest {
		s := []prompt.Suggest{
			{Text: "login", Description: "登录"},
			{Text: "quit", Description: "退出"},
			{Text: "q", Description: "查询货品信息"},
		}
		return prompt.FilterHasPrefix(s, in.GetWordBeforeCursor(), true)
	}
	logged_suggestions := func(in prompt.Document) []prompt.Suggest {
		s := []prompt.Suggest{
			{Text: "logout", Description: "登出"},
			{Text: "password", Description: "设置密码"},
			{Text: "quit", Description: "退出"},
			{Text: "q", Description: "查询货品信息"},
		}
		//user
		if user_grant&dbconn.GRANT_USER_RD != 0 {
			s = append(s, prompt.Suggest{Text: "list-user", Description: "显示用户列表"})
		}
		if user_grant&dbconn.GRANT_USER_WR != 0 {
			s = append(s, prompt.Suggest{Text: "add-user", Description: "添加用户"})
			s = append(s, prompt.Suggest{Text: "set-user-password", Description: "设定用户密码"})
			s = append(s, prompt.Suggest{Text: "set-user-grant", Description: "设定用户权限"})
		}
		if user_grant&dbconn.GRANT_USER_RM != 0 {
			s = append(s, prompt.Suggest{Text: "remove-user", Description: "移除用户"})
		}
		// pattern
		if user_grant&dbconn.GRANT_PATTERN_RD != 0 {
			s = append(s, prompt.Suggest{Text: "list-pattern", Description: "显示模型"})
		}
		if user_grant&dbconn.GRANT_PATTERN_WR != 0 {
			s = append(s, prompt.Suggest{Text: "add-pattern", Description: "添加模型"})
			s = append(s, prompt.Suggest{Text: "set-pattern", Description: "设定模型"})
		}
		if user_grant&dbconn.GRANT_PATTERN_RM != 0 {
			s = append(s, prompt.Suggest{Text: "remove-pattern", Description: "移除模型"})
		}
		// Batch
		if user_grant&dbconn.GRANT_BATCH_RD != 0 {
			s = append(s, prompt.Suggest{Text: "list-batch", Description: "显示批次"})
		}
		if user_grant&dbconn.GRANT_BATCH_WR != 0 {
			s = append(s, prompt.Suggest{Text: "add-batch", Description: "添加批次"})
			s = append(s, prompt.Suggest{Text: "set-batch", Description: "设定批次"})
		}
		if user_grant&dbconn.GRANT_BATCH_RM != 0 {
			s = append(s, prompt.Suggest{Text: "remove-batch", Description: "移除批次"})
		}
		// Product
		if user_grant&dbconn.GRANT_PRODUCT_RD != 0 {
			s = append(s, prompt.Suggest{Text: "list-product", Description: "显示品项"})
		}
		if user_grant&dbconn.GRANT_PRODUCT_WR != 0 {
			s = append(s, prompt.Suggest{Text: "add-product", Description: "添加品项"})
			s = append(s, prompt.Suggest{Text: "set-product", Description: "设定品项"})
		}
		if user_grant&dbconn.GRANT_PRODUCT_RM != 0 {
			s = append(s, prompt.Suggest{Text: "remove-product", Description: "移除品项"})
		}
		//item
		if user_grant&dbconn.GRANT_ITEM_RD != 0 {
			s = append(s, prompt.Suggest{Text: "list-item", Description: "显示货品"})
		}
		if user_grant&dbconn.GRANT_ITEM_WR != 0 {
			s = append(s, prompt.Suggest{Text: "add-item", Description: "添加货品"})
			s = append(s, prompt.Suggest{Text: "set-item", Description: "设定货品"})
		}
		if user_grant&dbconn.GRANT_ITEM_RM != 0 {
			s = append(s, prompt.Suggest{Text: "remove-item", Description: "移除货品"})
		}

		return prompt.FilterHasPrefix(s, in.GetWordBeforeCursor(), true)
	}
	if is_logged_in == false {
		opt = strings.TrimSpace(prompt.Input("(none)> ", unlogged_suggestions))
	} else {
		opt = strings.TrimSpace(prompt.Input(user_name+" > ", logged_suggestions))
	}
	if is_logged_in {
		switch opt {
		case "quit":
			log.Println("用户 [", user_name, "] 登出")
			return false
		case "logout":
			log.Println("用户 [", user_name, "] 登出")
			is_logged_in = false
			user_id = 0
			user_name = ""
			user_grant = 0
		case "password":
			setpassword()
		case "add-user":
			addUser()
		case "list-user":
			listUser()
		case "set-user-password":
			setUserPassword()
		case "set-user-grant":
			setUserGrant()
		case "remove-user":
			removeUser()
		// pattern
		case "list-pattern":
			listPattern()
		case "add-pattern":
			addPattern()
		case "set-pattern":
			setPattern()
		case "remove-pattern":
			removePattern()
		// batch
		case "list-batch":
			listBatch()
		case "add-batch":
			addBatch()
		case "set-batch":
			setBatch()
		case "remove-batch":
			removeBatch()
		// product
		case "list-product":
			listProduct()
		case "add-product":
			addProduct()
		case "set-product":
			setProduct()
		case "remove-product":
			removeProduct()
		// item
		case "list-item":
			listItem()
		case "add-item":
			addItem()
		case "set-item":
			setItem()
		case "remove-item":
			removeItem()
		case "q":
			getItemInfomation()
		case "":
		default:
			fmt.Println("语法错误")
		}
	} else {
		switch opt {
		case "quit":
			return false
		case "login":
			login()
		case "q":
			getItemInfomation()
		case "":
		default:
			fmt.Println("语法错误")
		}
	}
	if opt != "" {
		fmt.Println("")
	}
	return true
}

func main() {
	var err error

	flags()

	logFile, err := os.OpenFile(config.LOG_PATH, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		fmt.Println(err)
		return
	}
	log.SetOutput(logFile)
	log.SetFlags(log.Lmicroseconds | log.Ldate)
	fmt.Println(config.EXE_BANNER)

	err = dbconn.Connect(db_ip, db_port, db_name, db_user, db_password)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer dbconn.Close()

	is_logged_in = false
	for {
		if loop() == false {
			break
		}
	}
	dbconn.Login(db_user, db_password)
	fmt.Printf("再见！\n")
	return
}
